//! Utilities for auto-registration of types into the global registry.
//!
//! The global registry is available via [`Registry::global`].

use crate::{types::OnceCell, Registry};

/// The global, `'static` default [`Registry`]. It's constructed and accessible via
/// [`Registry::global`].
pub(crate) static DEFAULT_REGISTRY: OnceCell<Registry> = OnceCell::new();

/// All auto-registration functions need to use this type for registration.
///
/// This is, usually, used by the derive macro, and not manually.
#[non_exhaustive]
#[allow(missing_debug_implementations)]
pub struct RegistrationFunc(pub(crate) fn(&Registry));

impl RegistrationFunc {
    /// Create a new [`RegistrationFunc`] from a `register` function.
    ///
    /// The `register` function gets passed a [`Registry`], which it must use to register one or
    /// more types.
    ///
    /// The function must not have any side-effects. It may be called concurrently, in parallel,
    /// and from any thread (not only the main thread).
    ///
    /// # Example
    /// ```no_run
    /// # use ferrunix_core::*;
    /// # use ferrunix_core::registration::*;
    /// #[derive(Debug)]
    /// struct StringTemplate {
    ///     template: &'static str,
    /// }
    ///
    /// // Usually, this `impl` is generated by the `Inject` proc-macro.
    /// impl StringTemplate {
    ///     pub(crate) fn register(registry: &Registry) {
    ///         registry
    ///             .transient::<StringTemplate>(|| StringTemplate { template: "" });
    ///     }
    /// }
    ///
    /// // The construction must be `const`.
    /// autoregister!(RegistrationFunc::new(
    ///     StringTemplate::register
    /// ));
    /// ```
    pub const fn new(register: fn(&Registry) -> ()) -> Self {
        Self(register)
    }
}

// Create a new inventory for the auto-registration.
inventory::collect!(RegistrationFunc);

/// Use `autoregister` to register a new [`RegistrationFunc`].
pub use inventory::submit as autoregister;
